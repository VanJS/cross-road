var e=Object.defineProperty,t=(t,s,i)=>((t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i)(t,"symbol"!=typeof s?s+"":s,i);import{p as s,P as i}from"./phaser-CLPCUXx9.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class a extends s.Scene{constructor(){super("Boot")}preload(){this.load.image("background","assets/skies/sky_day.png"),console.log("Boot scene preload complete")}create(){console.log("Boot scene starting Preloader"),this.scene.start("Preloader")}}class n extends i.Physics.Arcade.Sprite{constructor(e,s,i){var a;super(e,s,i,"duck_idle"),t(this,"cursors"),t(this,"gamepad",null),t(this,"direction","right"),t(this,"moveSpeed",150),t(this,"animationTypes",["duck_idle","duck_walk"]),t(this,"scaleSize",1.5),e.add.existing(this),e.physics.add.existing(this),this.setCollideWorldBounds(!0),this.setScale(this.scaleSize),this.createAnimations(),this.cursors=(null==(a=e.input.keyboard)?void 0:a.createCursorKeys())||{},this.play("duck_idle")}createAnimations(){for(const e of this.animationTypes)if(!this.scene.anims.exists(e))switch(e){case"duck_idle":this.scene.anims.create({key:"duck_idle",frames:this.scene.anims.generateFrameNames("duck_idle",{prefix:"duckee_idle",start:1,end:4,suffix:".png"}),frameRate:8,repeat:-1});break;case"duck_walk":this.scene.anims.create({key:"duck_walk",frames:this.scene.anims.generateFrameNames("duck_walk",{prefix:"duckee_walk_run",start:1,end:4,suffix:".png"}),frameRate:10,repeat:-1})}}update(){this.handleGamepadConnection();const e=this.getMovementState();switch(this.setVelocity(0,0),e){case"left":this.direction="left",this.setFlipX(!0),this.setVelocityX(-this.moveSpeed),this.play("duck_walk",!0);break;case"right":this.direction="right",this.setFlipX(!1),this.setVelocityX(this.moveSpeed),this.play("duck_walk",!0);break;case"up":this.setVelocityY(-this.moveSpeed),this.play("duck_walk",!0);break;case"down":this.setVelocityY(this.moveSpeed),this.play("duck_walk",!0);break;case"upLeft":this.direction="left",this.setFlipX(!0),this.setVelocity(-this.moveSpeed/Math.sqrt(2),-this.moveSpeed/Math.sqrt(2)),this.play("duck_walk",!0);break;case"upRight":this.direction="right",this.setFlipX(!1),this.setVelocity(this.moveSpeed/Math.sqrt(2),-this.moveSpeed/Math.sqrt(2)),this.play("duck_walk",!0);break;case"downLeft":this.direction="left",this.setFlipX(!0),this.setVelocity(-this.moveSpeed/Math.sqrt(2),this.moveSpeed/Math.sqrt(2)),this.play("duck_walk",!0);break;case"downRight":this.direction="right",this.setFlipX(!1),this.setVelocity(this.moveSpeed/Math.sqrt(2),this.moveSpeed/Math.sqrt(2)),this.play("duck_walk",!0);break;default:this.play("duck_idle",!0)}}handleGamepadConnection(){var e;!this.gamepad&&(null==(e=this.scene.input.gamepad)?void 0:e.total)&&(this.gamepad=this.scene.input.gamepad.getPad(0))}getMovementState(){var e,t,s,i;let a=!1,n=!1,r=!1,c=!1;return(null==(e=this.cursors.left)?void 0:e.isDown)&&(a=!0),(null==(t=this.cursors.right)?void 0:t.isDown)&&(n=!0),(null==(s=this.cursors.up)?void 0:s.isDown)&&(r=!0),(null==(i=this.cursors.down)?void 0:i.isDown)&&(c=!0),this.gamepad&&((this.gamepad.leftStick.x<-.5||this.gamepad.left)&&(a=!0),(this.gamepad.leftStick.x>.5||this.gamepad.right)&&(n=!0),(this.gamepad.leftStick.y<-.5||this.gamepad.up)&&(r=!0),(this.gamepad.leftStick.y>.5||this.gamepad.down)&&(c=!0)),a&&n&&(a=n=!1),r&&c&&(r=c=!1),r&&a?"upLeft":r&&n?"upRight":c&&a?"downLeft":c&&n?"downRight":a?"left":n?"right":r?"up":c?"down":"idle"}getDuckDirection(){return this.direction}}const r=class e extends i.Physics.Arcade.Sprite{constructor(e,s,i,a="blue"){if(super(e,s,i,`plane_${a}`),t(this,"scaleSize",.1),e.add.existing(this),e.physics.add.existing(this),this.setScale(this.scaleSize),this.setVelocity(0,0),this.setActive(!0),this.setVisible(!0),this.body){const e=this.width*this.scaleSize*.8,t=this.height*this.scaleSize*.6;this.body.setSize(e,t),this.body.setOffset((this.width-e)/2,(this.height-t)/2)}}startMoving(e){this.setVelocityX(e),e<0&&this.setFlipX(!0)}update(){const e=this.scene.cameras.main.width;(this.x>e+this.width||this.x<-this.width)&&this.destroy()}static preloadAssets(t){e.COLORS.forEach((e=>{const s=`plane_${e}`;t.load.image(s,`assets/plane_1/plane_1_${e}.png`)}))}};t(r,"COLORS",["blue","pink","red","yellow"]);let c=r;class o{constructor(e,s){t(this,"scene"),t(this,"planes"),t(this,"spawnTimer"),t(this,"duck"),t(this,"isPlayerInvincible",!1),t(this,"lanes",[]),t(this,"laneHeight",64),t(this,"laneSpacing",2),t(this,"baseSpeed",300),t(this,"minDistanceBetweenPlanes",200),t(this,"spawnChance",.3),this.scene=e,this.duck=s,this.planes=e.physics.add.group({classType:c,runChildUpdate:!0}),e.physics.add.overlap(this.duck,this.planes,this.handlePlaneDuckCollision,void 0,this),this.setupLanes(),this.spawnTimer=e.time.addEvent({delay:1500,callback:this.checkLanesForSpawning,callbackScope:this,loop:!0})}setupLanes(){const e=this.scene.cameras.main.height,t=Math.floor(e/this.laneHeight);for(let s=0;s<t;s+=this.laneSpacing){const e=s*this.laneHeight+this.laneHeight/2,t=i.Math.Between(this.baseSpeed-30,this.baseSpeed+30),a=Math.random()>.5?1:-1;this.lanes.push({y:e,speed:t,lastSpawnTime:0,direction:a,isActive:Math.random()>.3})}console.log(`Created ${this.lanes.length} lanes with spacing of ${this.laneSpacing}`)}checkLanesForSpawning(){const e=this.scene.time.now;this.lanes.forEach((t=>{if(!t.isActive)return;const s=i.Math.Between(2e3,5e3);e-t.lastSpawnTime>s&&Math.random()<this.spawnChance&&this.canSpawnInLane(t)&&(this.spawnPlaneInLane(t),t.lastSpawnTime=e)}))}canSpawnInLane(e){const t=this.getPlanesInLane(e);if(0===t.length)return!0;if(e.direction>0)return t.reduce(((e,t)=>e.x<t.x?e:t)).x>this.minDistanceBetweenPlanes;{const e=t.reduce(((e,t)=>e.x>t.x?e:t));return this.scene.cameras.main.width-e.x>this.minDistanceBetweenPlanes}}getPlanesInLane(e){return this.planes.getChildren().filter((t=>{const s=t;return Math.abs(s.y-e.y)<10}))}spawnPlaneInLane(e){const t=i.Math.Between(0,c.COLORS.length-1),s=c.COLORS[t],a=this.scene.cameras.main.width;let n;n=e.direction>0?-50:a+50;const r=new c(this.scene,n,e.y,s);this.planes.add(r),r.startMoving(e.speed*e.direction)}handlePlaneDuckCollision(e){if(this.isPlayerInvincible)return;this.isPlayerInvincible=!0;const t=e;this.scene.tweens.add({targets:t,alpha:.5,duration:100,yoyo:!0,repeat:5,onComplete:()=>{t.setAlpha(1),this.isPlayerInvincible=!1}})}update(){}destroy(){this.spawnTimer&&this.spawnTimer.destroy(),this.planes.clear(!0,!0)}}class h extends i.Scene{constructor(){super("Game"),t(this,"duck"),t(this,"planeManager")}preload(){c.preloadAssets(this)}create(){console.log("Game scene create() method called"),this.add.image(0,0,"background").setOrigin(0,0).setDisplaySize(this.cameras.main.width,this.cameras.main.height),console.log("Background added");try{this.duck=new n(this,this.cameras.main.width/2,this.cameras.main.height/2),console.log("Duck created successfully")}catch(e){console.error("Error creating duck:",e)}this.cameras.main.startFollow(this.duck,!0,.08,.08),this.planeManager=new o(this,this.duck),console.log("Plane manager created")}update(){this.duck.update(),this.planeManager.update(),this.duck.y>this.cameras.main.height&&this.scene.start("GameOver")}}class l extends s.Scene{constructor(){super("GameOver"),t(this,"camera"),t(this,"background"),t(this,"gameover_text")}create(){this.camera=this.cameras.main,this.camera.setBackgroundColor(16711680),this.background=this.add.image(512,384,"background"),this.background.setAlpha(.5),this.gameover_text=this.add.text(512,384,"Game Over",{fontFamily:"Arial Black",fontSize:64,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}),this.gameover_text.setOrigin(.5),this.input.once("pointerdown",(()=>{this.scene.start("MainMenu")}))}}class d extends s.Scene{constructor(){super("MainMenu"),t(this,"background"),t(this,"logo"),t(this,"title")}create(){this.background=this.add.image(512,384,"background"),this.logo=this.add.image(512,300,"logo"),this.title=this.add.text(512,460,"Main Menu",{fontFamily:"Arial Black",fontSize:38,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}).setOrigin(.5),this.input.once("pointerdown",(()=>{this.scene.start("Game")}))}}class p extends i.Scene{constructor(){super("Preloader")}preload(){const e=this.cameras.main.width,t=this.cameras.main.height,s=this.add.graphics(),i=this.add.graphics();i.fillStyle(2236962,.8),i.fillRect(e/4,t/2-30,e/2,50);const a=this.add.text(e/2,t/2-50,"Loading...",{font:"20px monospace",color:"#ffffff"}).setOrigin(.5,.5),n=this.add.text(e/2,t/2+70,"0%",{font:"18px monospace",color:"#ffffff"}).setOrigin(.5,.5);this.load.on("progress",(i=>{s.clear(),s.fillStyle(16777215,1),s.fillRect(e/4+10,t/2-20,(e/2-20)*i,30),n.setText(`${parseInt(String(100*i))}%`)})),this.load.on("complete",(()=>{s.destroy(),i.destroy(),a.destroy(),n.destroy()})),this.load.on("loaderror",(e=>{console.error("Error loading asset:",e.src)})),this.load.atlas("duck_idle","assets/duck/idle/duck_idle.png","assets/duck/idle/duck_idle.json"),this.load.atlas("duck_walk","assets/duck/walk/duck_walk.png","assets/duck/walk/duck_walk.json"),this.load.atlas("duck_jump","assets/duck/jump/duck_jump.png","assets/duck/jump/duck_jump.json"),c.COLORS.forEach((e=>{const t=`plane_${e}`;this.load.image(t,`assets/plane_1/plane_1_${e}.png`)})),this.load.image("background","assets/skies/sky_day.jpg"),this.load.image("logo","assets/logo.png")}create(){this.scene.start("MainMenu")}}const u={type:Phaser.AUTO,width:1024,height:768,parent:"game-container",backgroundColor:"#028af8",scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.CENTER_BOTH,width:1024,height:768,min:{width:320,height:240},max:{width:1600,height:1200},autoRound:!0},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!0}},input:{keyboard:!0,touch:!0,gamepad:!0},scene:[a,p,d,h,l]};window.addEventListener("resize",(()=>{g&&g.scale.refresh()}));const g=new s.Game(u);
